{"version":3,"sources":["components/Header.js","context/AppReducer.js","context/GlobalState.js","components/MovieControls.js","components/MovieCard.js","components/Watchlist.js","components/Watched.js","components/ResultCard.js","components/Add.js","components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","to","state","action","type","watchlist","payload","filter","movie","id","watched","initialState","localStorage","getItem","JSON","parse","GlobalContext","createContext","GlobalProvider","props","useReducer","AppReducer","dispatch","useEffect","setItem","stringify","Provider","value","addMovieToWatchlist","removeMovieFromWatchlist","addMovieToWatched","moveToWatchlist","removeFromWatched","children","MovieControls","useContext","onClick","MovieCard","poster_path","src","alt","title","Watchlist","length","map","Watched","ResultCard","storedMovie","find","o","storedMovieWatched","watchlistDisabled","watchedDisabled","release_date","substring","disabled","Add","useState","query","setQuery","results","setResults","placeholder","onChange","e","preventDefault","target","fetch","then","res","json","data","errors","Footer","quotes","setQuotes","getQuote","method","redirect","headers","Authorization","randomNumber","Math","floor","random","docs","dialog","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6b743ab7.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport const Header = () => {\n  return (\n    <header>\n      <div className=\"container\">\n        <div className=\"inner-content\">\n          <div className=\"brand\">\n            <Link to=\"/\">WatchList</Link>\n          </div>\n\n          <ul className=\"nav-links\">\n            <li>\n              <Link to=\"/\">WatchList</Link>\n            </li>\n            <li>\n              <Link to=\"/watched\">Watched</Link>\n            </li>\n            <li>\n              <Link to=\"/add\" className=\"button\">\n                + Add\n              </Link>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </header>\n  );\n};\n","export default (state, action) => {\n  switch (action.type) {\n    case \"ADD_MOVIE_TO_WATCHLIST\":\n      return {\n        ...state,\n        watchlist: [action.payload, ...state.watchlist],\n        //payload = movie data\n      };\n    case \"REMOVE_MOVIE_FROM_WATCHLIST\":\n      return {\n        ...state,\n        watchlist: state.watchlist.filter(\n          (movie) => movie.id !== action.payload\n        ),\n        //this filters through the array and returns all the movies that are not equal to the id we just passed it (removes that id from the state)\n      };\n    case \"ADD_MOVIE_TO_WATCHED\":\n      return {\n        ...state,\n        watchlist: state.watchlist.filter(\n          (movie) => movie.id !== action.payload.id\n        ),\n        watched: [action.payload, ...state.watched],\n        //first we remove it from the watchlist, then add it to watched\n      };\n    case \"MOVE_TO_WATCHLIST\":\n      return {\n        ...state,\n        watched: state.watched.filter(\n          (movie) => movie.id !== action.payload.id\n        ),\n        watchlist: [action.payload, ...state.watchlist],\n        //first we remove it from watched, then add it to watchlist\n        //the reason we use action.payload.id here is because we're passing the whole movie, so we need to access the id from the whole movie\n      };\n    case \"REMOVE_FROM_WATCHED\":\n      return {\n        ...state,\n        watched: state.watched.filter((movie) => movie.id !== action.payload),\n        //this filters through the array and returns all the movies that are not equal to the id we just passed it (removes that id from the state)\n        //since we are passing the id here we only need to use action.payload\n      };\n    default:\n      return state;\n  }\n};\n\n//A reducer is basically a function that returns some state data\n//It describes how your state is transferred into the next state\n//It tells our store what to do with the data when something has happened\n\n//An action is basically an object that tells the reducer how to change the state\n","import React, { createContext, useReducer, useEffect } from \"react\";\nimport AppReducer from \"./AppReducer\";\n\n// initial state (initial value of the store)\n//Start by checking if there is something in localStorage, if there is parse it back into an array and return it, else return an empty array\nconst initialState = {\n  watchlist: localStorage.getItem(\"watchlist\")\n    ? JSON.parse(localStorage.getItem(\"watchlist\"))\n    : [],\n  watched: localStorage.getItem(\"watched\")\n    ? JSON.parse(localStorage.getItem(\"watched\"))\n    : [],\n};\n\n// create context\nexport const GlobalContext = createContext(initialState);\n\n// provider components (a component that allows us to provide the GlobalContext to other components so they can access it)\nexport const GlobalProvider = (props) => {\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n\n  //The useEffect will be triggered whenever the state is changed inside of the provider (e.g. when a movie is added to our watchlist)\n  //localStorage has to be a string, JSON.stringify converts our watchlist array into a string and stores it in localstorage as \"watchlist\"\n  useEffect(() => {\n    localStorage.setItem(\"watchlist\", JSON.stringify(state.watchlist));\n    localStorage.setItem(\"watched\", JSON.stringify(state.watched));\n  }, [state]);\n\n  // ACTIONS\n\n  //when we click \"add to watchlist\" we use an action to tell the provider what to do once we've clicked the button\n  const addMovieToWatchlist = (movie) => {\n    dispatch({ type: \"ADD_MOVIE_TO_WATCHLIST\", payload: movie });\n  };\n\n  // action to remove a movie from the watchlist\n  const removeMovieFromWatchlist = (id) => {\n    dispatch({ type: \"REMOVE_MOVIE_FROM_WATCHLIST\", payload: id });\n  };\n\n  // action to move a movie from watchlist to watched\n  const addMovieToWatched = (movie) => {\n    dispatch({ type: \"ADD_MOVIE_TO_WATCHED\", payload: movie });\n  };\n\n  // action to move from watched to watchlist\n  const moveToWatchlist = (movie) => {\n    dispatch({ type: \"MOVE_TO_WATCHLIST\", payload: movie });\n  };\n\n  // action to remove from watched (when we remove we only need to pass the id)\n  const removeFromWatched = (id) => {\n    dispatch({ type: \"REMOVE_FROM_WATCHED\", payload: id });\n  };\n\n  return (\n    //The global provider will wrap all the children on the application so we can access the GlobalContext from every component\n    //value = the values that are available from the provider\n    <GlobalContext.Provider\n      value={{\n        watchlist: state.watchlist,\n        watched: state.watched,\n        addMovieToWatchlist,\n        removeMovieFromWatchlist,\n        addMovieToWatched,\n        moveToWatchlist,\n        removeFromWatched,\n      }}\n    >\n      {props.children}\n    </GlobalContext.Provider>\n  );\n};\n\n//This is basically a store that stores all of our state data\n//The store holds the object that holds the applications state data\n","import React, { useContext } from \"react\";\nimport { GlobalContext } from \"../context/GlobalState\";\n\nexport const MovieControls = ({ movie, type }) => {\n  const {\n    removeMovieFromWatchlist,\n    addMovieToWatched,\n    moveToWatchlist,\n    removeFromWatched,\n  } = useContext(GlobalContext);\n  return (\n    <div className=\"inner-card-controls\">\n      {type === \"watchlist\" && (\n        <>\n          <button\n            className=\"control-button\"\n            onClick={() => addMovieToWatched(movie)}\n          >\n            Watched\n          </button>\n          <button\n            className=\"control-button\"\n            onClick={() => removeMovieFromWatchlist(movie.id)}\n          >\n            Delete\n          </button>\n        </>\n      )}\n      {type === \"watched\" && (\n        <>\n          <button\n            className=\"control-button\"\n            onClick={() => moveToWatchlist(movie)}\n          >\n            Move to Watchlist\n          </button>\n          <button\n            className=\"control-button\"\n            onClick={() => removeFromWatched(movie.id)}\n          >\n            Delete\n          </button>\n        </>\n      )}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { MovieControls } from \"./MovieControls\";\n\nexport const MovieCard = ({ movie, type }) => {\n  return (\n    <div className=\"movie-card\">\n      <div className=\"overlay\"></div>\n\n      {movie.poster_path ? (\n        <img\n          src={`https://image.tmdb.org/t/p/w200${movie.poster_path}`}\n          alt={`${movie.title} Poster`}\n        />\n      ) : (\n        <div className=\"filler-poster\"></div>\n      )}\n\n      <MovieControls type={type} movie={movie} />\n    </div>\n  );\n};\n","import React, { useContext } from \"react\";\nimport { GlobalContext } from \"../context/GlobalState\";\nimport { MovieCard } from \"./MovieCard\";\n\nexport const Watchlist = () => {\n  //in our watchlist component we can access the watchlist from the GlobalContext\n  const { watchlist } = useContext(GlobalContext);\n  return (\n    <div className=\"movie-page\">\n      <div className=\"container\">\n        <div className=\"header\">\n          <h1 className=\"heading\">My Watchlist</h1>\n\n          <span className=\"count-pill\">\n            {\" \"}\n            {watchlist.length} {watchlist.length === 1 ? \"Movie\" : \"Movies\"}\n          </span>\n        </div>\n\n        {watchlist.length > 0 ? (\n          <div className=\"movie-grid\">\n            {watchlist.map((movie) => (\n              <MovieCard movie={movie} type=\"watchlist\" key={movie.id} />\n            ))}\n          </div>\n        ) : (\n          <h2 className=\"no-movies\">No movies in your list, add some!</h2>\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useContext } from \"react\";\nimport { GlobalContext } from \"../context/GlobalState\";\nimport { MovieCard } from \"./MovieCard\";\n\nexport const Watched = () => {\n  const { watched } = useContext(GlobalContext);\n  return (\n    <div className=\"movie-page\">\n      <div className=\"container\">\n        <div className=\"header\">\n          <h1 className=\"heading\">Watched Movies</h1>\n\n          <span className=\"count-pill\">\n            {\" \"}\n            {watched.length} {watched.length === 1 ? \"Movie\" : \"Movies\"}\n          </span>\n        </div>\n\n        {watched.length > 0 ? (\n          <div className=\"movie-grid\">\n            {watched.map((movie) => (\n              <MovieCard movie={movie} type=\"watched\" key={movie.id} />\n            ))}\n          </div>\n        ) : (\n          <h2 className=\"no-movies\">No movies in your list, add some!</h2>\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useContext } from \"react\";\nimport { GlobalContext } from \"../context/GlobalState\";\n\nexport const ResultCard = ({ movie }) => {\n  //We have access to the addMovieToWatchlist action and we can connect it to the button\n  const {\n    addMovieToWatchlist,\n    addMovieToWatched,\n    watchlist,\n    watched,\n  } = useContext(GlobalContext);\n\n  //search for objects that have an equal id to the object we're trying to add\n  //search through the array and check if the movie is already in the watchlist (we don't want to be able to add it twice):\n  let storedMovie = watchlist.find((o) => o.id === movie.id);\n  let storedMovieWatched = watched.find((o) => o.id === movie.id);\n\n  //If the movie is already in the watchlist return true (we will then use that to disable the add button), else (if the movie isn't in the watchlist) return false\n  const watchlistDisabled = storedMovie\n    ? true\n    : storedMovieWatched\n    ? true\n    : false;\n\n  const watchedDisabled = storedMovieWatched ? true : false;\n  return (\n    <div className=\"result-card\">\n      <div className=\"poster-wrapper\">\n        {movie.poster_path ? (\n          <img\n            src={`https://image.tmdb.org/t/p/w200${movie.poster_path}`}\n            alt={`${movie.title} Poster`}\n          />\n        ) : (\n          <div className=\"filler-poster\"></div>\n        )}\n      </div>\n\n      <div className=\"info\">\n        <div className=\"header\">\n          <h3 className=\"title\">{movie.title}</h3>\n          <h4 className=\"release-date\">\n            {movie.release_date ? movie.release_date.substring(0, 4) : \"-\"}\n          </h4>\n        </div>\n\n        <div className=\"controls\">\n          <button\n            className=\"button\"\n            disabled={watchlistDisabled}\n            onClick={() => addMovieToWatchlist(movie)}\n          >\n            Add to Watchlist\n          </button>\n\n          <button\n            className=\"button\"\n            disabled={watchedDisabled}\n            onClick={() => addMovieToWatched(movie)}\n          >\n            Add to Watched\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { ResultCard } from \"./ResultCard\";\n\nexport const Add = () => {\n  //STATE\n  //A query string that's going to be the value of our input, the initial state is an empty string:\n  const [query, setQuery] = useState(\"\");\n  //A state to store the API results, the initial state value is an empty array since we want to return an array of results:\n  const [results, setResults] = useState([]);\n\n  //FUNCTIONS\n  const onChange = (e) => {\n    e.preventDefault();\n\n    setQuery(e.target.value); //We set the state equal to the value that's typed in the input\n\n    //Every time we type in the input field we want to fetch movies from the API\n    fetch(\n      `https://api.themoviedb.org/3/search/movie?api_key=f800e5b690dde892553c0758c7c9b9f6&language=en-US&page=1&include_adult=false&query=${e.target.value}`\n    )\n      .then((res) => res.json())\n      .then((data) => {\n        if (!data.errors) {\n          setResults(data.results);\n        } else {\n          setResults([]);\n        }\n      });\n  };\n\n  return (\n    <div className=\"add-page\">\n      <div className=\"container\">\n        <div className=\"add-content\">\n          <div className=\"input-wrapper\">\n            <input\n              type=\"text\"\n              placeholder=\"Search for a movie\"\n              value={query}\n              onChange={onChange}\n            />\n          </div>\n          {results.length > 0 && (\n            <ul className=\"results\">\n              {results.map((movie) => (\n                <li key={movie.id}>\n                  <ResultCard movie={movie} />\n                </li>\n              ))}\n            </ul>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\n\nexport const Footer = () => {\n  //STATE\n  const [quotes, setQuotes] = useState(\"\");\n  const token = \"g0A9nm8lFL0bHebZHw5S\";\n\n  //FUNCTIONS\n\n  const getQuote = () => {\n    fetch(\"https://the-one-api.dev/v2/movie/5cd95395de30eff6ebccde5c/quote\", {\n      method: \"GET\",\n      redirect: \"follow\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        if (!data.errors) {\n          let randomNumber = Math.floor(Math.random() * data.docs.length);\n          setQuotes(data.docs[randomNumber]);\n        } else {\n          setQuotes(\"\");\n        }\n      });\n  };\n\n  useEffect(() => {\n    getQuote();\n  }, []);\n\n  return (\n    <footer className=\"footer\">\n      <div className=\"quote-box\">\n        <p>{quotes.dialog}</p>\n      </div>\n      <button className=\"quote-button button\" onClick={getQuote}>\n        Generate quote\n      </button>\n    </footer>\n  );\n};\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Header } from \"./components/Header\";\nimport { Watchlist } from \"./components/Watchlist\";\nimport { Watched } from \"./components/Watched\";\nimport { Add } from \"./components/Add\";\nimport { Footer } from \"./components/Footer\";\nimport \"./styles/App.css\";\n\nimport { GlobalProvider } from \"./context/GlobalState\";\n\nfunction App() {\n  return (\n    <GlobalProvider>\n      <Router>\n        <Header />\n\n        <Switch>\n          <Route exact path=\"/\">\n            <Watchlist />\n          </Route>\n\n          <Route path=\"/watched\">\n            <Watched />\n          </Route>\n\n          <Route path=\"/add\">\n            <Add />\n          </Route>\n        </Switch>\n      </Router>\n      <Footer />\n    </GlobalProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}